// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "organizations", "users", "subscriptions"]
}

// User
enum AuthProvider {
  FIREBASE

  @@map(name: "auth_provider_enum")
  @@schema("users")
}

enum AuthType {
  EMAIL_AND_PASSWORD
  FACEBOOK_AUTH
  GOOGLE_AUTH
  GITHUB_AUTH

  @@map(name: "auth_type_enum")
  @@schema("users")
}

model User {
  user_id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_username      String       @db.VarChar(63)
  user_first_name    String       @db.VarChar(63)
  user_last_name     String       @db.VarChar(63)
  user_email         String       @db.VarChar(63)
  user_terms         Boolean      @default(false)
  user_is_active     Boolean      @default(true)
  user_uid           String       @db.VarChar(255)
  user_role          String       @db.VarChar(63)
  user_auth_provider AuthProvider
  user_auth_type     AuthType
  user_created_at    DateTime     @default(now()) @db.Timestamptz
  user_updated_at    DateTime     @default(now()) @db.Timestamptz

  user_role_reference Role              @relation(fields: [user_role], references: [role_name], name: "users_roles_fk")
  authTokens          AuthTokenStatus[] @relation(name: "auth_token_statuses_users_fk")

  @@map(name: "users")
  @@schema("users")
}

// Roles
model Role {
  role_id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role_name       String   @db.VarChar(63)
  role_created_at DateTime @default(now()) @db.Timestamptz
  role_updated_at DateTime @default(now()) @db.Timestamptz

  users User[] @relation("users_roles_fk")

  @@unique([role_name], name: "role_name_unique")
  @@map(name: "roles")
  @@schema("users")
}

// AuthTokenStatuses
model AuthTokenStatus {
  auth_token_id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  auth_token_user            String   @db.Uuid
  auth_token_issued_at       BigInt   @db.BigInt
  auth_token_expiration_time BigInt   @db.BigInt
  auth_token_created_at      DateTime @default(now()) @db.Timestamptz
  auth_token_updated_at      DateTime @default(now()) @db.Timestamptz

  user User @relation(fields: [auth_token_user], references: [user_id], name: "auth_token_statuses_users_fk")

  @@map(name: "auth_token_statuses")
  @@schema("users")
}

enum TrainingLevel {
  BASIC
  POWER
  PRO

  @@map(name: "training_level_enum")
  @@schema("users")
}

model Survey {
  survey_id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  survey_user       String       @db.Uuid
  survey_level      TrainingLevel
  survey_created_at DateTime     @default(now()) @db.Timestamptz
  survey_updated_at DateTime     @default(now()) @db.Timestamptz

  user User @relation(fields: [survey_user], references: [user_id], name: "surveys_users_fk")
  answers SurveyAnswer[]

  @@map(name: "surveys")
  @@schema("users")
}

model SurveyAnswer {
  answer_id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  answer_survey     String   @db.Uuid
  answer_question   String   @db.VarChar(255)
  answer_value      String   @db.VarChar(255)
  answer_level      TrainingLevel
  answer_created_at DateTime @default(now()) @db.Timestamptz
  answer_updated_at DateTime @default(now()) @db.Timestamptz

  survey Survey @relation(fields: [answer_survey], references: [survey_id], name: "survey_answers_survey_fk")

  @@map(name: "survey_answers")
  @@schema("users")
}
