generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "organizations", "users", "subscriptions"]
}

// ENUMS
enum AuthProvider {
  FIREBASE

  @@map(name: "auth_provider_enum")
  @@schema("users")
}

enum AuthType {
  EMAIL_AND_PASSWORD
  FACEBOOK_AUTH
  GOOGLE_AUTH
  GITHUB_AUTH

  @@map(name: "auth_type_enum")
  @@schema("users")
}

enum TrainingLevel {
  BASIC
  POWER
  PRO

  @@map(name: "training_level_enum")
  @@schema("users")
}

// MODELS
model User {
  user_id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_username      String       @db.VarChar(63)
  user_first_name    String       @db.VarChar(63)
  user_last_name     String       @db.VarChar(63)
  user_email         String       @db.VarChar(63)
  user_terms         Boolean      @default(false)
  user_is_active     Boolean      @default(true)
  user_uid           String       @db.VarChar(255)
  user_role          String       @db.VarChar(63)
  user_auth_provider AuthProvider
  user_auth_type     AuthType
  user_created_at    DateTime     @default(now()) @db.Timestamptz
  user_updated_at    DateTime     @default(now()) @db.Timestamptz

  user_role_reference Role              @relation(fields: [user_role], references: [role_name], name: "users_roles_fk")
  authTokens          AuthTokenStatus[] @relation(name: "auth_token_statuses_users_fk")
  surveySubmissions   UserSurvey[]      @relation(name: "user_survey_user_fk")

  @@map(name: "users")
  @@schema("users")
}

model Role {
  role_id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role_name       String   @db.VarChar(63)
  role_created_at DateTime @default(now()) @db.Timestamptz
  role_updated_at DateTime @default(now()) @db.Timestamptz

  users User[] @relation("users_roles_fk")

  @@unique([role_name], name: "role_name_unique")
  @@map(name: "roles")
  @@schema("users")
}

model AuthTokenStatus {
  auth_token_id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  auth_token_user            String   @db.Uuid
  auth_token_issued_at       BigInt   @db.BigInt
  auth_token_expiration_time BigInt   @db.BigInt
  auth_token_created_at      DateTime @default(now()) @db.Timestamptz
  auth_token_updated_at      DateTime @default(now()) @db.Timestamptz

  user User @relation(fields: [auth_token_user], references: [user_id], name: "auth_token_statuses_users_fk")

  @@map(name: "auth_token_statuses")
  @@schema("users")
}

model Survey {
  survey_id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  survey_title       String   @db.VarChar(255)
  survey_description String?  @db.Text
  survey_created_at  DateTime @default(now()) @db.Timestamptz
  survey_updated_at  DateTime @default(now()) @db.Timestamptz

  questions       Question[]   @relation(name: "survey_questions_fk")
  userSubmissions UserSurvey[] @relation(name: "user_survey_survey_fk")

  @@map(name: "surveys")
  @@schema("users")
}

model Question {
  question_id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  question_survey     String   @db.Uuid
  question_text       String   @db.Text
  question_order      Int
  question_created_at DateTime @default(now()) @db.Timestamptz
  question_updated_at DateTime @default(now()) @db.Timestamptz

  survey        Survey         @relation(name: "survey_questions_fk", fields: [question_survey], references: [survey_id])
  answerOptions AnswerOption[] @relation(name: "question_answer_options_fk")
  userAnswers   UserAnswer[]   @relation(name: "user_answer_question_fk")

  @@map(name: "questions")
  @@schema("users")
}

model AnswerOption {
  option_id         String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  option_question   String        @db.Uuid
  option_text       String        @db.Text
  option_level      TrainingLevel
  option_created_at DateTime      @default(now()) @db.Timestamptz
  option_updated_at DateTime      @default(now()) @db.Timestamptz

  question    Question     @relation(name: "question_answer_options_fk", fields: [option_question], references: [question_id])
  userAnswers UserAnswer[] @relation(name: "user_answer_option_fk")

  @@map(name: "answer_options")
  @@schema("users")
}

model UserSurvey {
  submission_id         String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  submission_user       String        @db.Uuid
  submission_survey     String        @db.Uuid
  submission_level      TrainingLevel
  submission_created_at DateTime      @default(now()) @db.Timestamptz
  submission_updated_at DateTime      @default(now()) @db.Timestamptz

  user    User         @relation(name: "user_survey_user_fk", fields: [submission_user], references: [user_id])
  survey  Survey       @relation(name: "user_survey_survey_fk", fields: [submission_survey], references: [survey_id])
  answers UserAnswer[] @relation(name: "user_answer_submission_fk")

  @@map(name: "user_surveys")
  @@schema("users")
}

model UserAnswer {
  answer_id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  answer_submission      String   @db.Uuid
  answer_question        String   @db.Uuid
  answer_selected_option String   @db.Uuid
  answer_created_at      DateTime @default(now()) @db.Timestamptz
  answer_updated_at      DateTime @default(now()) @db.Timestamptz

  submission     UserSurvey   @relation(name: "user_answer_submission_fk", fields: [answer_submission], references: [submission_id])
  question       Question     @relation(name: "user_answer_question_fk", fields: [answer_question], references: [question_id])
  selectedOption AnswerOption @relation(name: "user_answer_option_fk", fields: [answer_selected_option], references: [option_id])

  @@map(name: "user_answers")
  @@schema("users")
}
